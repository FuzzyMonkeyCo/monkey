// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: fuzzymonkey.proto

package fm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Clt_ResetProgress_Status int32

const (
	Clt_ResetProgress_NOOP    Clt_ResetProgress_Status = 0
	Clt_ResetProgress_started Clt_ResetProgress_Status = 1
	Clt_ResetProgress_ended   Clt_ResetProgress_Status = 2
	Clt_ResetProgress_failed  Clt_ResetProgress_Status = 3
)

// Enum value maps for Clt_ResetProgress_Status.
var (
	Clt_ResetProgress_Status_name = map[int32]string{
		0: "NOOP",
		1: "started",
		2: "ended",
		3: "failed",
	}
	Clt_ResetProgress_Status_value = map[string]int32{
		"NOOP":    0,
		"started": 1,
		"ended":   2,
		"failed":  3,
	}
)

func (x Clt_ResetProgress_Status) Enum() *Clt_ResetProgress_Status {
	p := new(Clt_ResetProgress_Status)
	*p = x
	return p
}

func (x Clt_ResetProgress_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Clt_ResetProgress_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_fuzzymonkey_proto_enumTypes[0].Descriptor()
}

func (Clt_ResetProgress_Status) Type() protoreflect.EnumType {
	return &file_fuzzymonkey_proto_enumTypes[0]
}

func (x Clt_ResetProgress_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Clt_ResetProgress_Status.Descriptor instead.
func (Clt_ResetProgress_Status) EnumDescriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Clt_CallVerifProgress_Status int32

const (
	Clt_CallVerifProgress_NO_STATUS Clt_CallVerifProgress_Status = 0
	Clt_CallVerifProgress_success   Clt_CallVerifProgress_Status = 1
	Clt_CallVerifProgress_skipped   Clt_CallVerifProgress_Status = 2
	Clt_CallVerifProgress_failure   Clt_CallVerifProgress_Status = 3
	Clt_CallVerifProgress_done      Clt_CallVerifProgress_Status = 4
)

// Enum value maps for Clt_CallVerifProgress_Status.
var (
	Clt_CallVerifProgress_Status_name = map[int32]string{
		0: "NO_STATUS",
		1: "success",
		2: "skipped",
		3: "failure",
		4: "done",
	}
	Clt_CallVerifProgress_Status_value = map[string]int32{
		"NO_STATUS": 0,
		"success":   1,
		"skipped":   2,
		"failure":   3,
		"done":      4,
	}
)

func (x Clt_CallVerifProgress_Status) Enum() *Clt_CallVerifProgress_Status {
	p := new(Clt_CallVerifProgress_Status)
	*p = x
	return p
}

func (x Clt_CallVerifProgress_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Clt_CallVerifProgress_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_fuzzymonkey_proto_enumTypes[1].Descriptor()
}

func (Clt_CallVerifProgress_Status) Type() protoreflect.EnumType {
	return &file_fuzzymonkey_proto_enumTypes[1]
}

func (x Clt_CallVerifProgress_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Clt_CallVerifProgress_Status.Descriptor instead.
func (Clt_CallVerifProgress_Status) EnumDescriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 4, 0}
}

type Clt_CallVerifProgress_Origin int32

const (
	Clt_CallVerifProgress_NO_ORIGIN      Clt_CallVerifProgress_Origin = 0
	Clt_CallVerifProgress_built_in       Clt_CallVerifProgress_Origin = 1
	Clt_CallVerifProgress_after_response Clt_CallVerifProgress_Origin = 2
)

// Enum value maps for Clt_CallVerifProgress_Origin.
var (
	Clt_CallVerifProgress_Origin_name = map[int32]string{
		0: "NO_ORIGIN",
		1: "built_in",
		2: "after_response",
	}
	Clt_CallVerifProgress_Origin_value = map[string]int32{
		"NO_ORIGIN":      0,
		"built_in":       1,
		"after_response": 2,
	}
)

func (x Clt_CallVerifProgress_Origin) Enum() *Clt_CallVerifProgress_Origin {
	p := new(Clt_CallVerifProgress_Origin)
	*p = x
	return p
}

func (x Clt_CallVerifProgress_Origin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Clt_CallVerifProgress_Origin) Descriptor() protoreflect.EnumDescriptor {
	return file_fuzzymonkey_proto_enumTypes[2].Descriptor()
}

func (Clt_CallVerifProgress_Origin) Type() protoreflect.EnumType {
	return &file_fuzzymonkey_proto_enumTypes[2]
}

func (x Clt_CallVerifProgress_Origin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Clt_CallVerifProgress_Origin.Descriptor instead.
func (Clt_CallVerifProgress_Origin) EnumDescriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 4, 1}
}

type EndpointJSON_Method int32

const (
	EndpointJSON_UNKNOWN EndpointJSON_Method = 0
	EndpointJSON_GET     EndpointJSON_Method = 1
	EndpointJSON_HEAD    EndpointJSON_Method = 2
	EndpointJSON_POST    EndpointJSON_Method = 3
	EndpointJSON_PUT     EndpointJSON_Method = 4
	EndpointJSON_PATCH   EndpointJSON_Method = 5
	EndpointJSON_DELETE  EndpointJSON_Method = 6
	EndpointJSON_CONNECT EndpointJSON_Method = 7
	EndpointJSON_OPTIONS EndpointJSON_Method = 8
	EndpointJSON_TRACE   EndpointJSON_Method = 9
)

// Enum value maps for EndpointJSON_Method.
var (
	EndpointJSON_Method_name = map[int32]string{
		0: "UNKNOWN",
		1: "GET",
		2: "HEAD",
		3: "POST",
		4: "PUT",
		5: "PATCH",
		6: "DELETE",
		7: "CONNECT",
		8: "OPTIONS",
		9: "TRACE",
	}
	EndpointJSON_Method_value = map[string]int32{
		"UNKNOWN": 0,
		"GET":     1,
		"HEAD":    2,
		"POST":    3,
		"PUT":     4,
		"PATCH":   5,
		"DELETE":  6,
		"CONNECT": 7,
		"OPTIONS": 8,
		"TRACE":   9,
	}
)

func (x EndpointJSON_Method) Enum() *EndpointJSON_Method {
	p := new(EndpointJSON_Method)
	*p = x
	return p
}

func (x EndpointJSON_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointJSON_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_fuzzymonkey_proto_enumTypes[3].Descriptor()
}

func (EndpointJSON_Method) Type() protoreflect.EnumType {
	return &file_fuzzymonkey_proto_enumTypes[3]
}

func (x EndpointJSON_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointJSON_Method.Descriptor instead.
func (EndpointJSON_Method) EnumDescriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{9, 0}
}

type ParamJSON_Kind int32

const (
	ParamJSON_UNKNOWN ParamJSON_Kind = 0
	ParamJSON_body    ParamJSON_Kind = 1
	ParamJSON_path    ParamJSON_Kind = 2
	ParamJSON_query   ParamJSON_Kind = 3
	ParamJSON_header  ParamJSON_Kind = 4
	ParamJSON_cookie  ParamJSON_Kind = 5
)

// Enum value maps for ParamJSON_Kind.
var (
	ParamJSON_Kind_name = map[int32]string{
		0: "UNKNOWN",
		1: "body",
		2: "path",
		3: "query",
		4: "header",
		5: "cookie",
	}
	ParamJSON_Kind_value = map[string]int32{
		"UNKNOWN": 0,
		"body":    1,
		"path":    2,
		"query":   3,
		"header":  4,
		"cookie":  5,
	}
)

func (x ParamJSON_Kind) Enum() *ParamJSON_Kind {
	p := new(ParamJSON_Kind)
	*p = x
	return p
}

func (x ParamJSON_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParamJSON_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_fuzzymonkey_proto_enumTypes[4].Descriptor()
}

func (ParamJSON_Kind) Type() protoreflect.EnumType {
	return &file_fuzzymonkey_proto_enumTypes[4]
}

func (x ParamJSON_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParamJSON_Kind.Descriptor instead.
func (ParamJSON_Kind) EnumDescriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{10, 0}
}

type Schema_JSON_Type int32

const (
	Schema_JSON_UNKNOWN Schema_JSON_Type = 0
	Schema_JSON_any     Schema_JSON_Type = 1
	Schema_JSON_null    Schema_JSON_Type = 2
	Schema_JSON_boolean Schema_JSON_Type = 3
	Schema_JSON_integer Schema_JSON_Type = 4
	Schema_JSON_number  Schema_JSON_Type = 5
	Schema_JSON_array   Schema_JSON_Type = 6
	Schema_JSON_string  Schema_JSON_Type = 7
	Schema_JSON_object  Schema_JSON_Type = 8
)

// Enum value maps for Schema_JSON_Type.
var (
	Schema_JSON_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "any",
		2: "null",
		3: "boolean",
		4: "integer",
		5: "number",
		6: "array",
		7: "string",
		8: "object",
	}
	Schema_JSON_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"any":     1,
		"null":    2,
		"boolean": 3,
		"integer": 4,
		"number":  5,
		"array":   6,
		"string":  7,
		"object":  8,
	}
)

func (x Schema_JSON_Type) Enum() *Schema_JSON_Type {
	p := new(Schema_JSON_Type)
	*p = x
	return p
}

func (x Schema_JSON_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_JSON_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fuzzymonkey_proto_enumTypes[5].Descriptor()
}

func (Schema_JSON_Type) Type() protoreflect.EnumType {
	return &file_fuzzymonkey_proto_enumTypes[5]
}

func (x Schema_JSON_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_JSON_Type.Descriptor instead.
func (Schema_JSON_Type) EnumDescriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{12, 0, 0}
}

type Clt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//	*Clt_Fuzz_
	//	*Clt_ResetProgress_
	//	*Clt_CallRequestRaw_
	//	*Clt_CallResponseRaw_
	//	*Clt_CallVerifProgress_
	Msg isClt_Msg `protobuf_oneof:"msg"`
}

func (x *Clt) Reset() {
	*x = Clt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt) ProtoMessage() {}

func (x *Clt) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt.ProtoReflect.Descriptor instead.
func (*Clt) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0}
}

func (m *Clt) GetMsg() isClt_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Clt) GetFuzz() *Clt_Fuzz {
	if x, ok := x.GetMsg().(*Clt_Fuzz_); ok {
		return x.Fuzz
	}
	return nil
}

func (x *Clt) GetResetProgress() *Clt_ResetProgress {
	if x, ok := x.GetMsg().(*Clt_ResetProgress_); ok {
		return x.ResetProgress
	}
	return nil
}

func (x *Clt) GetCallRequestRaw() *Clt_CallRequestRaw {
	if x, ok := x.GetMsg().(*Clt_CallRequestRaw_); ok {
		return x.CallRequestRaw
	}
	return nil
}

func (x *Clt) GetCallResponseRaw() *Clt_CallResponseRaw {
	if x, ok := x.GetMsg().(*Clt_CallResponseRaw_); ok {
		return x.CallResponseRaw
	}
	return nil
}

func (x *Clt) GetCallVerifProgress() *Clt_CallVerifProgress {
	if x, ok := x.GetMsg().(*Clt_CallVerifProgress_); ok {
		return x.CallVerifProgress
	}
	return nil
}

type isClt_Msg interface {
	isClt_Msg()
}

type Clt_Fuzz_ struct {
	// Initiates testing
	Fuzz *Clt_Fuzz `protobuf:"bytes,1,opt,name=fuzz,proto3,oneof"`
}

type Clt_ResetProgress_ struct {
	// SUT state resetting
	ResetProgress *Clt_ResetProgress `protobuf:"bytes,2,opt,name=reset_progress,json=resetProgress,proto3,oneof"`
}

type Clt_CallRequestRaw_ struct {
	// Actual call to SUT
	CallRequestRaw *Clt_CallRequestRaw `protobuf:"bytes,3,opt,name=call_request_raw,json=callRequestRaw,proto3,oneof"`
}

type Clt_CallResponseRaw_ struct {
	// SUT call response
	CallResponseRaw *Clt_CallResponseRaw `protobuf:"bytes,4,opt,name=call_response_raw,json=callResponseRaw,proto3,oneof"`
}

type Clt_CallVerifProgress_ struct {
	// SUT call verifications
	CallVerifProgress *Clt_CallVerifProgress `protobuf:"bytes,5,opt,name=call_verif_progress,json=callVerifProgress,proto3,oneof"`
}

func (*Clt_Fuzz_) isClt_Msg() {}

func (*Clt_ResetProgress_) isClt_Msg() {}

func (*Clt_CallRequestRaw_) isClt_Msg() {}

func (*Clt_CallResponseRaw_) isClt_Msg() {}

func (*Clt_CallVerifProgress_) isClt_Msg() {}

type Srv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FuzzingProgress *Srv_FuzzingProgress `protobuf:"bytes,1,opt,name=fuzzing_progress,json=fuzzingProgress,proto3" json:"fuzzing_progress,omitempty"` // Campaign progress
	// Types that are assignable to Msg:
	//	*Srv_FuzzRep_
	//	*Srv_Call_
	//	*Srv_Reset_
	//	*Srv_FuzzingResult_
	Msg isSrv_Msg `protobuf_oneof:"msg"`
}

func (x *Srv) Reset() {
	*x = Srv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv) ProtoMessage() {}

func (x *Srv) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv.ProtoReflect.Descriptor instead.
func (*Srv) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1}
}

func (x *Srv) GetFuzzingProgress() *Srv_FuzzingProgress {
	if x != nil {
		return x.FuzzingProgress
	}
	return nil
}

func (m *Srv) GetMsg() isSrv_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Srv) GetFuzzRep() *Srv_FuzzRep {
	if x, ok := x.GetMsg().(*Srv_FuzzRep_); ok {
		return x.FuzzRep
	}
	return nil
}

func (x *Srv) GetCall() *Srv_Call {
	if x, ok := x.GetMsg().(*Srv_Call_); ok {
		return x.Call
	}
	return nil
}

func (x *Srv) GetReset_() *Srv_Reset {
	if x, ok := x.GetMsg().(*Srv_Reset_); ok {
		return x.Reset_
	}
	return nil
}

func (x *Srv) GetFuzzingResult() *Srv_FuzzingResult {
	if x, ok := x.GetMsg().(*Srv_FuzzingResult_); ok {
		return x.FuzzingResult
	}
	return nil
}

type isSrv_Msg interface {
	isSrv_Msg()
}

type Srv_FuzzRep_ struct {
	// Response to initial message
	FuzzRep *Srv_FuzzRep `protobuf:"bytes,2,opt,name=fuzz_rep,json=fuzzRep,proto3,oneof"`
}

type Srv_Call_ struct {
	// Try call to SUT
	Call *Srv_Call `protobuf:"bytes,3,opt,name=call,proto3,oneof"`
}

type Srv_Reset_ struct {
	// Reset SUT state
	Reset_ *Srv_Reset `protobuf:"bytes,4,opt,name=reset,proto3,oneof"`
}

type Srv_FuzzingResult_ struct {
	// Result of testing campaign
	FuzzingResult *Srv_FuzzingResult `protobuf:"bytes,5,opt,name=fuzzing_result,json=fuzzingResult,proto3,oneof"`
}

func (*Srv_FuzzRep_) isSrv_Msg() {}

func (*Srv_Call_) isSrv_Msg() {}

func (*Srv_Reset_) isSrv_Msg() {}

func (*Srv_FuzzingResult_) isSrv_Msg() {}

type Uint32S struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Uint32S) Reset() {
	*x = Uint32S{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32S) ProtoMessage() {}

func (x *Uint32S) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32S.ProtoReflect.Descriptor instead.
func (*Uint32S) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{2}
}

func (x *Uint32S) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type HeaderPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *HeaderPair) Reset() {
	*x = HeaderPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderPair) ProtoMessage() {}

func (x *HeaderPair) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderPair.ProtoReflect.Descriptor instead.
func (*HeaderPair) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{3}
}

func (x *HeaderPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeaderPair) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type SpecIR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemas *Schemas `protobuf:"bytes,1,opt,name=schemas,proto3" json:"schemas,omitempty"`
	// All endpoints are here.
	// Start at 1 then increases monotonously. 0 (zero) is reserved for bug
	// finding.
	Endpoints map[uint32]*Endpoint `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SpecIR) Reset() {
	*x = SpecIR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecIR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecIR) ProtoMessage() {}

func (x *SpecIR) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecIR.ProtoReflect.Descriptor instead.
func (*SpecIR) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{4}
}

func (x *SpecIR) GetSchemas() *Schemas {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *SpecIR) GetEndpoints() map[uint32]*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type Schemas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All schemas are here.
	// Start at 1. 0 (zero) is reserved for bug finding.
	Json map[uint32]*RefOrSchemaJSON `protobuf:"bytes,1,rep,name=json,proto3" json:"json,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Schemas) Reset() {
	*x = Schemas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schemas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemas) ProtoMessage() {}

func (x *Schemas) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemas.ProtoReflect.Descriptor instead.
func (*Schemas) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{5}
}

func (x *Schemas) GetJson() map[uint32]*RefOrSchemaJSON {
	if x != nil {
		return x.Json
	}
	return nil
}

type RefOrSchemaJSON struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PtrOrSchema:
	//	*RefOrSchemaJSON_Ptr
	//	*RefOrSchemaJSON_Schema
	PtrOrSchema isRefOrSchemaJSON_PtrOrSchema `protobuf_oneof:"ptr_or_schema"`
}

func (x *RefOrSchemaJSON) Reset() {
	*x = RefOrSchemaJSON{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefOrSchemaJSON) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefOrSchemaJSON) ProtoMessage() {}

func (x *RefOrSchemaJSON) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefOrSchemaJSON.ProtoReflect.Descriptor instead.
func (*RefOrSchemaJSON) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{6}
}

func (m *RefOrSchemaJSON) GetPtrOrSchema() isRefOrSchemaJSON_PtrOrSchema {
	if m != nil {
		return m.PtrOrSchema
	}
	return nil
}

func (x *RefOrSchemaJSON) GetPtr() *SchemaPtr {
	if x, ok := x.GetPtrOrSchema().(*RefOrSchemaJSON_Ptr); ok {
		return x.Ptr
	}
	return nil
}

func (x *RefOrSchemaJSON) GetSchema() *Schema_JSON {
	if x, ok := x.GetPtrOrSchema().(*RefOrSchemaJSON_Schema); ok {
		return x.Schema
	}
	return nil
}

type isRefOrSchemaJSON_PtrOrSchema interface {
	isRefOrSchemaJSON_PtrOrSchema()
}

type RefOrSchemaJSON_Ptr struct {
	// Probably most often from a $ref
	// Only use SchemaPtr here. Everywhere else use SID.
	Ptr *SchemaPtr `protobuf:"bytes,1,opt,name=ptr,proto3,oneof"`
}

type RefOrSchemaJSON_Schema struct {
	// Actual schema when not a $ref
	Schema *Schema_JSON `protobuf:"bytes,2,opt,name=schema,proto3,oneof"`
}

func (*RefOrSchemaJSON_Ptr) isRefOrSchemaJSON_PtrOrSchema() {}

func (*RefOrSchemaJSON_Schema) isRefOrSchemaJSON_PtrOrSchema() {}

type SchemaPtr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pointer to actual schema. i.e. key in Schemas message.
	SID uint32 `protobuf:"varint,1,opt,name=SID,proto3" json:"SID,omitempty"`
	// $ref if was ref'd, in canonical/absolute (#/...-like) format.
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *SchemaPtr) Reset() {
	*x = SchemaPtr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaPtr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaPtr) ProtoMessage() {}

func (x *SchemaPtr) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaPtr.ProtoReflect.Descriptor instead.
func (*SchemaPtr) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{7}
}

func (x *SchemaPtr) GetSID() uint32 {
	if x != nil {
		return x.SID
	}
	return 0
}

func (x *SchemaPtr) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Endpoint:
	//	*Endpoint_Json
	Endpoint isEndpoint_Endpoint `protobuf_oneof:"endpoint"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{8}
}

func (m *Endpoint) GetEndpoint() isEndpoint_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (x *Endpoint) GetJson() *EndpointJSON {
	if x, ok := x.GetEndpoint().(*Endpoint_Json); ok {
		return x.Json
	}
	return nil
}

type isEndpoint_Endpoint interface {
	isEndpoint_Endpoint()
}

type Endpoint_Json struct {
	Json *EndpointJSON `protobuf:"bytes,1,opt,name=json,proto3,oneof"`
}

func (*Endpoint_Json) isEndpoint_Endpoint() {}

type EndpointJSON struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method       EndpointJSON_Method `protobuf:"varint,1,opt,name=method,proto3,enum=fm.EndpointJSON_Method" json:"method,omitempty"`
	PathPartials []*PathPartial      `protobuf:"bytes,2,rep,name=path_partials,json=pathPartials,proto3" json:"path_partials,omitempty"`
	Inputs       []*ParamJSON        `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The uint32 key replaces an enum of 1XX,...,201,204,...,5XX,XXX.
	// The uint32 values are SID
	Outputs map[uint32]uint32 `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *EndpointJSON) Reset() {
	*x = EndpointJSON{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointJSON) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointJSON) ProtoMessage() {}

func (x *EndpointJSON) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointJSON.ProtoReflect.Descriptor instead.
func (*EndpointJSON) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{9}
}

func (x *EndpointJSON) GetMethod() EndpointJSON_Method {
	if x != nil {
		return x.Method
	}
	return EndpointJSON_UNKNOWN
}

func (x *EndpointJSON) GetPathPartials() []*PathPartial {
	if x != nil {
		return x.PathPartials
	}
	return nil
}

func (x *EndpointJSON) GetInputs() []*ParamJSON {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *EndpointJSON) GetOutputs() map[uint32]uint32 {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type ParamJSON struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRequired bool   `protobuf:"varint,1,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	SID        uint32 `protobuf:"varint,2,opt,name=SID,proto3" json:"SID,omitempty"`
	// Note: bodies have an empty name
	Name string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind ParamJSON_Kind `protobuf:"varint,4,opt,name=kind,proto3,enum=fm.ParamJSON_Kind" json:"kind,omitempty"`
}

func (x *ParamJSON) Reset() {
	*x = ParamJSON{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamJSON) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamJSON) ProtoMessage() {}

func (x *ParamJSON) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamJSON.ProtoReflect.Descriptor instead.
func (*ParamJSON) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{10}
}

func (x *ParamJSON) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *ParamJSON) GetSID() uint32 {
	if x != nil {
		return x.SID
	}
	return 0
}

func (x *ParamJSON) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ParamJSON) GetKind() ParamJSON_Kind {
	if x != nil {
		return x.Kind
	}
	return ParamJSON_UNKNOWN
}

type PathPartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pp:
	//	*PathPartial_Part
	//	*PathPartial_Ptr
	Pp isPathPartial_Pp `protobuf_oneof:"pp"`
}

func (x *PathPartial) Reset() {
	*x = PathPartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathPartial) ProtoMessage() {}

func (x *PathPartial) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathPartial.ProtoReflect.Descriptor instead.
func (*PathPartial) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{11}
}

func (m *PathPartial) GetPp() isPathPartial_Pp {
	if m != nil {
		return m.Pp
	}
	return nil
}

func (x *PathPartial) GetPart() string {
	if x, ok := x.GetPp().(*PathPartial_Part); ok {
		return x.Part
	}
	return ""
}

func (x *PathPartial) GetPtr() string {
	if x, ok := x.GetPp().(*PathPartial_Ptr); ok {
		return x.Ptr
	}
	return ""
}

type isPathPartial_Pp interface {
	isPathPartial_Pp()
}

type PathPartial_Part struct {
	Part string `protobuf:"bytes,1,opt,name=part,proto3,oneof"`
}

type PathPartial_Ptr struct {
	Ptr string `protobuf:"bytes,2,opt,name=ptr,proto3,oneof"`
}

func (*PathPartial_Part) isPathPartial_Pp() {}

func (*PathPartial_Ptr) isPathPartial_Pp() {}

type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{12}
}

type Clt_Fuzz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resetters []*Clt_Fuzz_Resetter `protobuf:"bytes,1,rep,name=resetters,proto3" json:"resetters,omitempty"`
	Models    []*Clt_Fuzz_Model    `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	Usage     []string             `protobuf:"bytes,3,rep,name=usage,proto3" json:"usage,omitempty"`
	Seed      []byte               `protobuf:"bytes,4,opt,name=seed,proto3" json:"seed,omitempty"`
	Ntensity  uint32               `protobuf:"varint,5,opt,name=ntensity,proto3" json:"ntensity,omitempty"`
	EIDs      map[string]*Uint32S  `protobuf:"bytes,6,rep,name=EIDs,proto3" json:"EIDs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels    map[string]string    `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnvRead   map[string]string    `protobuf:"bytes,8,rep,name=env_read,json=envRead,proto3" json:"env_read,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UUIDs     []string             `protobuf:"bytes,9,rep,name=UUIDs,proto3" json:"UUIDs,omitempty"`
	Files     map[string]string    `protobuf:"bytes,10,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Clt_Fuzz) Reset() {
	*x = Clt_Fuzz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_Fuzz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_Fuzz) ProtoMessage() {}

func (x *Clt_Fuzz) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_Fuzz.ProtoReflect.Descriptor instead.
func (*Clt_Fuzz) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Clt_Fuzz) GetResetters() []*Clt_Fuzz_Resetter {
	if x != nil {
		return x.Resetters
	}
	return nil
}

func (x *Clt_Fuzz) GetModels() []*Clt_Fuzz_Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *Clt_Fuzz) GetUsage() []string {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *Clt_Fuzz) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *Clt_Fuzz) GetNtensity() uint32 {
	if x != nil {
		return x.Ntensity
	}
	return 0
}

func (x *Clt_Fuzz) GetEIDs() map[string]*Uint32S {
	if x != nil {
		return x.EIDs
	}
	return nil
}

func (x *Clt_Fuzz) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Clt_Fuzz) GetEnvRead() map[string]string {
	if x != nil {
		return x.EnvRead
	}
	return nil
}

func (x *Clt_Fuzz) GetUUIDs() []string {
	if x != nil {
		return x.UUIDs
	}
	return nil
}

func (x *Clt_Fuzz) GetFiles() map[string]string {
	if x != nil {
		return x.Files
	}
	return nil
}

type Clt_ResetProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    Clt_ResetProgress_Status `protobuf:"varint,1,opt,name=status,proto3,enum=fm.Clt_ResetProgress_Status" json:"status,omitempty"`
	ElapsedNs int64                    `protobuf:"varint,2,opt,name=elapsed_ns,json=elapsedNs,proto3" json:"elapsed_ns,omitempty"`
	Reason    []string                 `protobuf:"bytes,3,rep,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Clt_ResetProgress) Reset() {
	*x = Clt_ResetProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_ResetProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_ResetProgress) ProtoMessage() {}

func (x *Clt_ResetProgress) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_ResetProgress.ProtoReflect.Descriptor instead.
func (*Clt_ResetProgress) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Clt_ResetProgress) GetStatus() Clt_ResetProgress_Status {
	if x != nil {
		return x.Status
	}
	return Clt_ResetProgress_NOOP
}

func (x *Clt_ResetProgress) GetElapsedNs() int64 {
	if x != nil {
		return x.ElapsedNs
	}
	return 0
}

func (x *Clt_ResetProgress) GetReason() []string {
	if x != nil {
		return x.Reason
	}
	return nil
}

type Clt_CallRequestRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *Clt_CallRequestRaw_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Reason []string                  `protobuf:"bytes,2,rep,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Clt_CallRequestRaw) Reset() {
	*x = Clt_CallRequestRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_CallRequestRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_CallRequestRaw) ProtoMessage() {}

func (x *Clt_CallRequestRaw) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_CallRequestRaw.ProtoReflect.Descriptor instead.
func (*Clt_CallRequestRaw) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Clt_CallRequestRaw) GetInput() *Clt_CallRequestRaw_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Clt_CallRequestRaw) GetReason() []string {
	if x != nil {
		return x.Reason
	}
	return nil
}

type Clt_CallResponseRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output   *Clt_CallResponseRaw_Output `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	OutputId uint32                      `protobuf:"varint,2,opt,name=outputId,proto3" json:"outputId,omitempty"`
}

func (x *Clt_CallResponseRaw) Reset() {
	*x = Clt_CallResponseRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_CallResponseRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_CallResponseRaw) ProtoMessage() {}

func (x *Clt_CallResponseRaw) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_CallResponseRaw.ProtoReflect.Descriptor instead.
func (*Clt_CallResponseRaw) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Clt_CallResponseRaw) GetOutput() *Clt_CallResponseRaw_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *Clt_CallResponseRaw) GetOutputId() uint32 {
	if x != nil {
		return x.OutputId
	}
	return 0
}

type Clt_CallVerifProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status         Clt_CallVerifProgress_Status `protobuf:"varint,2,opt,name=status,proto3,enum=fm.Clt_CallVerifProgress_Status" json:"status,omitempty"`
	Origin         Clt_CallVerifProgress_Origin `protobuf:"varint,3,opt,name=origin,proto3,enum=fm.Clt_CallVerifProgress_Origin" json:"origin,omitempty"`
	Reason         []string                     `protobuf:"bytes,4,rep,name=reason,proto3" json:"reason,omitempty"`
	ElapsedNs      int64                        `protobuf:"varint,5,opt,name=elapsed_ns,json=elapsedNs,proto3" json:"elapsed_ns,omitempty"`
	ExecutionSteps uint64                       `protobuf:"varint,6,opt,name=execution_steps,json=executionSteps,proto3" json:"execution_steps,omitempty"`
}

func (x *Clt_CallVerifProgress) Reset() {
	*x = Clt_CallVerifProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_CallVerifProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_CallVerifProgress) ProtoMessage() {}

func (x *Clt_CallVerifProgress) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_CallVerifProgress.ProtoReflect.Descriptor instead.
func (*Clt_CallVerifProgress) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Clt_CallVerifProgress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Clt_CallVerifProgress) GetStatus() Clt_CallVerifProgress_Status {
	if x != nil {
		return x.Status
	}
	return Clt_CallVerifProgress_NO_STATUS
}

func (x *Clt_CallVerifProgress) GetOrigin() Clt_CallVerifProgress_Origin {
	if x != nil {
		return x.Origin
	}
	return Clt_CallVerifProgress_NO_ORIGIN
}

func (x *Clt_CallVerifProgress) GetReason() []string {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *Clt_CallVerifProgress) GetElapsedNs() int64 {
	if x != nil {
		return x.ElapsedNs
	}
	return 0
}

func (x *Clt_CallVerifProgress) GetExecutionSteps() uint64 {
	if x != nil {
		return x.ExecutionSteps
	}
	return 0
}

type Clt_Fuzz_Resetter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Provides []string `protobuf:"bytes,2,rep,name=provides,proto3" json:"provides,omitempty"`
	// Types that are assignable to Resetter:
	//	*Clt_Fuzz_Resetter_Shell_
	Resetter isClt_Fuzz_Resetter_Resetter `protobuf_oneof:"resetter"`
}

func (x *Clt_Fuzz_Resetter) Reset() {
	*x = Clt_Fuzz_Resetter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_Fuzz_Resetter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_Fuzz_Resetter) ProtoMessage() {}

func (x *Clt_Fuzz_Resetter) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_Fuzz_Resetter.ProtoReflect.Descriptor instead.
func (*Clt_Fuzz_Resetter) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Clt_Fuzz_Resetter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Clt_Fuzz_Resetter) GetProvides() []string {
	if x != nil {
		return x.Provides
	}
	return nil
}

func (m *Clt_Fuzz_Resetter) GetResetter() isClt_Fuzz_Resetter_Resetter {
	if m != nil {
		return m.Resetter
	}
	return nil
}

func (x *Clt_Fuzz_Resetter) GetShell() *Clt_Fuzz_Resetter_Shell {
	if x, ok := x.GetResetter().(*Clt_Fuzz_Resetter_Shell_); ok {
		return x.Shell
	}
	return nil
}

type isClt_Fuzz_Resetter_Resetter interface {
	isClt_Fuzz_Resetter_Resetter()
}

type Clt_Fuzz_Resetter_Shell_ struct {
	Shell *Clt_Fuzz_Resetter_Shell `protobuf:"bytes,3,opt,name=shell,proto3,oneof"`
}

func (*Clt_Fuzz_Resetter_Shell_) isClt_Fuzz_Resetter_Resetter() {}

type Clt_Fuzz_Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Model:
	//	*Clt_Fuzz_Model_Openapiv3
	Model isClt_Fuzz_Model_Model `protobuf_oneof:"model"`
}

func (x *Clt_Fuzz_Model) Reset() {
	*x = Clt_Fuzz_Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_Fuzz_Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_Fuzz_Model) ProtoMessage() {}

func (x *Clt_Fuzz_Model) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_Fuzz_Model.ProtoReflect.Descriptor instead.
func (*Clt_Fuzz_Model) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Clt_Fuzz_Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Clt_Fuzz_Model) GetModel() isClt_Fuzz_Model_Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (x *Clt_Fuzz_Model) GetOpenapiv3() *Clt_Fuzz_Model_OpenAPIv3 {
	if x, ok := x.GetModel().(*Clt_Fuzz_Model_Openapiv3); ok {
		return x.Openapiv3
	}
	return nil
}

type isClt_Fuzz_Model_Model interface {
	isClt_Fuzz_Model_Model()
}

type Clt_Fuzz_Model_Openapiv3 struct {
	Openapiv3 *Clt_Fuzz_Model_OpenAPIv3 `protobuf:"bytes,2,opt,name=openapiv3,proto3,oneof"`
}

func (*Clt_Fuzz_Model_Openapiv3) isClt_Fuzz_Model_Model() {}

type Clt_Fuzz_Resetter_Shell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Rst   string `protobuf:"bytes,2,opt,name=rst,proto3" json:"rst,omitempty"`
	Stop  string `protobuf:"bytes,3,opt,name=stop,proto3" json:"stop,omitempty"`
}

func (x *Clt_Fuzz_Resetter_Shell) Reset() {
	*x = Clt_Fuzz_Resetter_Shell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_Fuzz_Resetter_Shell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_Fuzz_Resetter_Shell) ProtoMessage() {}

func (x *Clt_Fuzz_Resetter_Shell) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_Fuzz_Resetter_Shell.ProtoReflect.Descriptor instead.
func (*Clt_Fuzz_Resetter_Shell) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Clt_Fuzz_Resetter_Shell) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *Clt_Fuzz_Resetter_Shell) GetRst() string {
	if x != nil {
		return x.Rst
	}
	return ""
}

func (x *Clt_Fuzz_Resetter_Shell) GetStop() string {
	if x != nil {
		return x.Stop
	}
	return ""
}

type Clt_Fuzz_Model_OpenAPIv3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File path within current directory pointing to a YAML/JSON spec
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Host superseeds the spec's base URL
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// HeaderAuthorization is added as bearer token if non-empty
	HeaderAuthorization string `protobuf:"bytes,3,opt,name=header_authorization,json=headerAuthorization,proto3" json:"header_authorization,omitempty"`
	// Spec is the spec pointed at by File
	Spec *SpecIR `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Clt_Fuzz_Model_OpenAPIv3) Reset() {
	*x = Clt_Fuzz_Model_OpenAPIv3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_Fuzz_Model_OpenAPIv3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_Fuzz_Model_OpenAPIv3) ProtoMessage() {}

func (x *Clt_Fuzz_Model_OpenAPIv3) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_Fuzz_Model_OpenAPIv3.ProtoReflect.Descriptor instead.
func (*Clt_Fuzz_Model_OpenAPIv3) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *Clt_Fuzz_Model_OpenAPIv3) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Clt_Fuzz_Model_OpenAPIv3) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Clt_Fuzz_Model_OpenAPIv3) GetHeaderAuthorization() string {
	if x != nil {
		return x.HeaderAuthorization
	}
	return ""
}

func (x *Clt_Fuzz_Model_OpenAPIv3) GetSpec() *SpecIR {
	if x != nil {
		return x.Spec
	}
	return nil
}

type Clt_CallRequestRaw_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*Clt_CallRequestRaw_Input_HttpRequest_
	Input isClt_CallRequestRaw_Input_Input `protobuf_oneof:"input"`
}

func (x *Clt_CallRequestRaw_Input) Reset() {
	*x = Clt_CallRequestRaw_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_CallRequestRaw_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_CallRequestRaw_Input) ProtoMessage() {}

func (x *Clt_CallRequestRaw_Input) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_CallRequestRaw_Input.ProtoReflect.Descriptor instead.
func (*Clt_CallRequestRaw_Input) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *Clt_CallRequestRaw_Input) GetInput() isClt_CallRequestRaw_Input_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *Clt_CallRequestRaw_Input) GetHttpRequest() *Clt_CallRequestRaw_Input_HttpRequest {
	if x, ok := x.GetInput().(*Clt_CallRequestRaw_Input_HttpRequest_); ok {
		return x.HttpRequest
	}
	return nil
}

type isClt_CallRequestRaw_Input_Input interface {
	isClt_CallRequestRaw_Input_Input()
}

type Clt_CallRequestRaw_Input_HttpRequest_ struct {
	HttpRequest *Clt_CallRequestRaw_Input_HttpRequest `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

func (*Clt_CallRequestRaw_Input_HttpRequest_) isClt_CallRequestRaw_Input_Input() {}

type Clt_CallRequestRaw_Input_HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method      string          `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url         string          `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers     []*HeaderPair   `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	Body        []byte          `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	BodyDecoded *structpb.Value `protobuf:"bytes,5,opt,name=body_decoded,json=bodyDecoded,proto3" json:"body_decoded,omitempty"`
}

func (x *Clt_CallRequestRaw_Input_HttpRequest) Reset() {
	*x = Clt_CallRequestRaw_Input_HttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_CallRequestRaw_Input_HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_CallRequestRaw_Input_HttpRequest) ProtoMessage() {}

func (x *Clt_CallRequestRaw_Input_HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_CallRequestRaw_Input_HttpRequest.ProtoReflect.Descriptor instead.
func (*Clt_CallRequestRaw_Input_HttpRequest) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

func (x *Clt_CallRequestRaw_Input_HttpRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Clt_CallRequestRaw_Input_HttpRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Clt_CallRequestRaw_Input_HttpRequest) GetHeaders() []*HeaderPair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Clt_CallRequestRaw_Input_HttpRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Clt_CallRequestRaw_Input_HttpRequest) GetBodyDecoded() *structpb.Value {
	if x != nil {
		return x.BodyDecoded
	}
	return nil
}

type Clt_CallResponseRaw_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Output:
	//	*Clt_CallResponseRaw_Output_HttpResponse_
	Output isClt_CallResponseRaw_Output_Output `protobuf_oneof:"output"`
}

func (x *Clt_CallResponseRaw_Output) Reset() {
	*x = Clt_CallResponseRaw_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_CallResponseRaw_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_CallResponseRaw_Output) ProtoMessage() {}

func (x *Clt_CallResponseRaw_Output) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_CallResponseRaw_Output.ProtoReflect.Descriptor instead.
func (*Clt_CallResponseRaw_Output) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (m *Clt_CallResponseRaw_Output) GetOutput() isClt_CallResponseRaw_Output_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *Clt_CallResponseRaw_Output) GetHttpResponse() *Clt_CallResponseRaw_Output_HttpResponse {
	if x, ok := x.GetOutput().(*Clt_CallResponseRaw_Output_HttpResponse_); ok {
		return x.HttpResponse
	}
	return nil
}

type isClt_CallResponseRaw_Output_Output interface {
	isClt_CallResponseRaw_Output_Output()
}

type Clt_CallResponseRaw_Output_HttpResponse_ struct {
	HttpResponse *Clt_CallResponseRaw_Output_HttpResponse `protobuf:"bytes,1,opt,name=http_response,json=httpResponse,proto3,oneof"`
}

func (*Clt_CallResponseRaw_Output_HttpResponse_) isClt_CallResponseRaw_Output_Output() {}

type Clt_CallResponseRaw_Output_HttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       string          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StatusCode  uint32          `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Reason      string          `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Headers     []*HeaderPair   `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	Body        []byte          `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	BodyDecoded *structpb.Value `protobuf:"bytes,6,opt,name=body_decoded,json=bodyDecoded,proto3" json:"body_decoded,omitempty"`
	ElapsedNs   int64           `protobuf:"varint,7,opt,name=elapsed_ns,json=elapsedNs,proto3" json:"elapsed_ns,omitempty"` // TODO: finer timings (name lookup, connection, ...)
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) Reset() {
	*x = Clt_CallResponseRaw_Output_HttpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clt_CallResponseRaw_Output_HttpResponse) ProtoMessage() {}

func (x *Clt_CallResponseRaw_Output_HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clt_CallResponseRaw_Output_HttpResponse.ProtoReflect.Descriptor instead.
func (*Clt_CallResponseRaw_Output_HttpResponse) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) GetHeaders() []*HeaderPair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) GetBodyDecoded() *structpb.Value {
	if x != nil {
		return x.BodyDecoded
	}
	return nil
}

func (x *Clt_CallResponseRaw_Output_HttpResponse) GetElapsedNs() int64 {
	if x != nil {
		return x.ElapsedNs
	}
	return 0
}

type Srv_FuzzingProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failure           bool   `protobuf:"varint,1,opt,name=failure,proto3" json:"failure,omitempty"`
	Success           bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	LastCallSuccess   bool   `protobuf:"varint,3,opt,name=last_call_success,json=lastCallSuccess,proto3" json:"last_call_success,omitempty"`
	LastCheckFailure  bool   `protobuf:"varint,4,opt,name=last_check_failure,json=lastCheckFailure,proto3" json:"last_check_failure,omitempty"`
	LastCheckSuccess  bool   `protobuf:"varint,5,opt,name=last_check_success,json=lastCheckSuccess,proto3" json:"last_check_success,omitempty"`
	TotalTestsCount   uint32 `protobuf:"varint,6,opt,name=total_tests_count,json=totalTestsCount,proto3" json:"total_tests_count,omitempty"`
	TotalCallsCount   uint32 `protobuf:"varint,7,opt,name=total_calls_count,json=totalCallsCount,proto3" json:"total_calls_count,omitempty"`
	TotalChecksCount  uint32 `protobuf:"varint,8,opt,name=total_checks_count,json=totalChecksCount,proto3" json:"total_checks_count,omitempty"`
	TestCallsCount    uint32 `protobuf:"varint,9,opt,name=test_calls_count,json=testCallsCount,proto3" json:"test_calls_count,omitempty"`
	CallChecksCount   uint32 `protobuf:"varint,10,opt,name=call_checks_count,json=callChecksCount,proto3" json:"call_checks_count,omitempty"`
	CallChecksSkipped uint32 `protobuf:"varint,11,opt,name=call_checks_skipped,json=callChecksSkipped,proto3" json:"call_checks_skipped,omitempty"`
}

func (x *Srv_FuzzingProgress) Reset() {
	*x = Srv_FuzzingProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_FuzzingProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_FuzzingProgress) ProtoMessage() {}

func (x *Srv_FuzzingProgress) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_FuzzingProgress.ProtoReflect.Descriptor instead.
func (*Srv_FuzzingProgress) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Srv_FuzzingProgress) GetFailure() bool {
	if x != nil {
		return x.Failure
	}
	return false
}

func (x *Srv_FuzzingProgress) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Srv_FuzzingProgress) GetLastCallSuccess() bool {
	if x != nil {
		return x.LastCallSuccess
	}
	return false
}

func (x *Srv_FuzzingProgress) GetLastCheckFailure() bool {
	if x != nil {
		return x.LastCheckFailure
	}
	return false
}

func (x *Srv_FuzzingProgress) GetLastCheckSuccess() bool {
	if x != nil {
		return x.LastCheckSuccess
	}
	return false
}

func (x *Srv_FuzzingProgress) GetTotalTestsCount() uint32 {
	if x != nil {
		return x.TotalTestsCount
	}
	return 0
}

func (x *Srv_FuzzingProgress) GetTotalCallsCount() uint32 {
	if x != nil {
		return x.TotalCallsCount
	}
	return 0
}

func (x *Srv_FuzzingProgress) GetTotalChecksCount() uint32 {
	if x != nil {
		return x.TotalChecksCount
	}
	return 0
}

func (x *Srv_FuzzingProgress) GetTestCallsCount() uint32 {
	if x != nil {
		return x.TestCallsCount
	}
	return 0
}

func (x *Srv_FuzzingProgress) GetCallChecksCount() uint32 {
	if x != nil {
		return x.CallChecksCount
	}
	return 0
}

func (x *Srv_FuzzingProgress) GetCallChecksSkipped() uint32 {
	if x != nil {
		return x.CallChecksSkipped
	}
	return 0
}

type Srv_FuzzRep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTestsCount             uint32 `protobuf:"varint,1,opt,name=max_tests_count,json=maxTestsCount,proto3" json:"max_tests_count,omitempty"` // Maximum amount of tests that will be performed
	Seed                      []byte `protobuf:"bytes,2,opt,name=seed,proto3" json:"seed,omitempty"`                                           // Seed in use for the campaign
	Token                     string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	MaxExecutionStepsPerCheck uint64 `protobuf:"varint,4,opt,name=max_execution_steps_per_check,json=maxExecutionStepsPerCheck,proto3" json:"max_execution_steps_per_check,omitempty"` // for Starlark SetMaxExecutionSteps
	MaxExecutionMsPerCheck    uint32 `protobuf:"varint,5,opt,name=max_execution_ms_per_check,json=maxExecutionMsPerCheck,proto3" json:"max_execution_ms_per_check,omitempty"`
}

func (x *Srv_FuzzRep) Reset() {
	*x = Srv_FuzzRep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_FuzzRep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_FuzzRep) ProtoMessage() {}

func (x *Srv_FuzzRep) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_FuzzRep.ProtoReflect.Descriptor instead.
func (*Srv_FuzzRep) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Srv_FuzzRep) GetMaxTestsCount() uint32 {
	if x != nil {
		return x.MaxTestsCount
	}
	return 0
}

func (x *Srv_FuzzRep) GetSeed() []byte {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *Srv_FuzzRep) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Srv_FuzzRep) GetMaxExecutionStepsPerCheck() uint64 {
	if x != nil {
		return x.MaxExecutionStepsPerCheck
	}
	return 0
}

func (x *Srv_FuzzRep) GetMaxExecutionMsPerCheck() uint32 {
	if x != nil {
		return x.MaxExecutionMsPerCheck
	}
	return 0
}

type Srv_Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input     *Srv_Call_Input `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	EID       uint32          `protobuf:"varint,2,opt,name=EID,proto3" json:"EID,omitempty"`
	ModelName string          `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *Srv_Call) Reset() {
	*x = Srv_Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_Call) ProtoMessage() {}

func (x *Srv_Call) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_Call.ProtoReflect.Descriptor instead.
func (*Srv_Call) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Srv_Call) GetInput() *Srv_Call_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Srv_Call) GetEID() uint32 {
	if x != nil {
		return x.EID
	}
	return 0
}

func (x *Srv_Call) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type Srv_Reset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Srv_Reset) Reset() {
	*x = Srv_Reset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_Reset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_Reset) ProtoMessage() {}

func (x *Srv_Reset) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_Reset.ProtoReflect.Descriptor instead.
func (*Srv_Reset) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 3}
}

type Srv_FuzzingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedUsed       []byte                                  `protobuf:"bytes,1,opt,name=seed_used,json=seedUsed,proto3" json:"seed_used,omitempty"` // Seed used on campaign
	WasShrinking   bool                                    `protobuf:"varint,2,opt,name=was_shrinking,json=wasShrinking,proto3" json:"was_shrinking,omitempty"`
	NextSeed       []byte                                  `protobuf:"bytes,3,opt,name=next_seed,json=nextSeed,proto3" json:"next_seed,omitempty"` // Seed suggested for next run
	WillNowShrink  bool                                    `protobuf:"varint,4,opt,name=will_now_shrink,json=willNowShrink,proto3" json:"will_now_shrink,omitempty"`
	SuggestedSeed  []byte                                  `protobuf:"bytes,5,opt,name=suggested_seed,json=suggestedSeed,proto3" json:"suggested_seed,omitempty"`
	Counterexample []*Srv_FuzzingResult_CounterexampleItem `protobuf:"bytes,6,rep,name=counterexample,proto3" json:"counterexample,omitempty"`
}

func (x *Srv_FuzzingResult) Reset() {
	*x = Srv_FuzzingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_FuzzingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_FuzzingResult) ProtoMessage() {}

func (x *Srv_FuzzingResult) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_FuzzingResult.ProtoReflect.Descriptor instead.
func (*Srv_FuzzingResult) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 4}
}

func (x *Srv_FuzzingResult) GetSeedUsed() []byte {
	if x != nil {
		return x.SeedUsed
	}
	return nil
}

func (x *Srv_FuzzingResult) GetWasShrinking() bool {
	if x != nil {
		return x.WasShrinking
	}
	return false
}

func (x *Srv_FuzzingResult) GetNextSeed() []byte {
	if x != nil {
		return x.NextSeed
	}
	return nil
}

func (x *Srv_FuzzingResult) GetWillNowShrink() bool {
	if x != nil {
		return x.WillNowShrink
	}
	return false
}

func (x *Srv_FuzzingResult) GetSuggestedSeed() []byte {
	if x != nil {
		return x.SuggestedSeed
	}
	return nil
}

func (x *Srv_FuzzingResult) GetCounterexample() []*Srv_FuzzingResult_CounterexampleItem {
	if x != nil {
		return x.Counterexample
	}
	return nil
}

type Srv_Call_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*Srv_Call_Input_HttpRequest_
	Input isSrv_Call_Input_Input `protobuf_oneof:"input"`
}

func (x *Srv_Call_Input) Reset() {
	*x = Srv_Call_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_Call_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_Call_Input) ProtoMessage() {}

func (x *Srv_Call_Input) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_Call_Input.ProtoReflect.Descriptor instead.
func (*Srv_Call_Input) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (m *Srv_Call_Input) GetInput() isSrv_Call_Input_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *Srv_Call_Input) GetHttpRequest() *Srv_Call_Input_HttpRequest {
	if x, ok := x.GetInput().(*Srv_Call_Input_HttpRequest_); ok {
		return x.HttpRequest
	}
	return nil
}

type isSrv_Call_Input_Input interface {
	isSrv_Call_Input_Input()
}

type Srv_Call_Input_HttpRequest_ struct {
	HttpRequest *Srv_Call_Input_HttpRequest `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

func (*Srv_Call_Input_HttpRequest_) isSrv_Call_Input_Input() {}

type Srv_Call_Input_HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method  string          `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Url     string          `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Headers []*HeaderPair   `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	Body    *structpb.Value `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Srv_Call_Input_HttpRequest) Reset() {
	*x = Srv_Call_Input_HttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_Call_Input_HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_Call_Input_HttpRequest) ProtoMessage() {}

func (x *Srv_Call_Input_HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_Call_Input_HttpRequest.ProtoReflect.Descriptor instead.
func (*Srv_Call_Input_HttpRequest) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 2, 0, 0}
}

func (x *Srv_Call_Input_HttpRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Srv_Call_Input_HttpRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Srv_Call_Input_HttpRequest) GetHeaders() []*HeaderPair {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Srv_Call_Input_HttpRequest) GetBody() *structpb.Value {
	if x != nil {
		return x.Body
	}
	return nil
}

type Srv_FuzzingResult_CounterexampleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallRequest  *Clt_CallRequestRaw_Input   `protobuf:"bytes,1,opt,name=call_request,json=callRequest,proto3" json:"call_request,omitempty"`
	CallResponse *Clt_CallResponseRaw_Output `protobuf:"bytes,2,opt,name=call_response,json=callResponse,proto3" json:"call_response,omitempty"`
}

func (x *Srv_FuzzingResult_CounterexampleItem) Reset() {
	*x = Srv_FuzzingResult_CounterexampleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv_FuzzingResult_CounterexampleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv_FuzzingResult_CounterexampleItem) ProtoMessage() {}

func (x *Srv_FuzzingResult_CounterexampleItem) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv_FuzzingResult_CounterexampleItem.ProtoReflect.Descriptor instead.
func (*Srv_FuzzingResult_CounterexampleItem) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{1, 4, 0}
}

func (x *Srv_FuzzingResult_CounterexampleItem) GetCallRequest() *Clt_CallRequestRaw_Input {
	if x != nil {
		return x.CallRequest
	}
	return nil
}

func (x *Srv_FuzzingResult_CounterexampleItem) GetCallResponse() *Clt_CallResponseRaw_Output {
	if x != nil {
		return x.CallResponse
	}
	return nil
}

type Schema_JSON struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types        []Schema_JSON_Type `protobuf:"varint,1,rep,packed,name=types,proto3,enum=fm.Schema_JSON_Type" json:"types,omitempty"`
	Enum         []*structpb.Value  `protobuf:"bytes,2,rep,name=enum,proto3" json:"enum,omitempty"`
	Format       string             `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	MinLength    uint64             `protobuf:"varint,4,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength    uint64             `protobuf:"varint,5,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	HasMaxLength bool               `protobuf:"varint,6,opt,name=has_max_length,json=hasMaxLength,proto3" json:"has_max_length,omitempty"`
	Pattern      string             `protobuf:"bytes,7,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// type: number | integer
	Minimum              float64 `protobuf:"fixed64,8,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum              float64 `protobuf:"fixed64,9,opt,name=maximum,proto3" json:"maximum,omitempty"`
	HasMinimum           bool    `protobuf:"varint,10,opt,name=has_minimum,json=hasMinimum,proto3" json:"has_minimum,omitempty"`
	HasMaximum           bool    `protobuf:"varint,11,opt,name=has_maximum,json=hasMaximum,proto3" json:"has_maximum,omitempty"`
	TranslatedMultipleOf float64 `protobuf:"fixed64,12,opt,name=translated_multiple_of,json=translatedMultipleOf,proto3" json:"translated_multiple_of,omitempty"` // default: 0.0, add +1.0 when reading
	ExclusiveMinimum     bool    `protobuf:"varint,13,opt,name=exclusive_minimum,json=exclusiveMinimum,proto3" json:"exclusive_minimum,omitempty"`
	ExclusiveMaximum     bool    `protobuf:"varint,14,opt,name=exclusive_maximum,json=exclusiveMaximum,proto3" json:"exclusive_maximum,omitempty"`
	// type: array
	Items       []uint32 `protobuf:"varint,15,rep,packed,name=items,proto3" json:"items,omitempty"`
	UniqueItems bool     `protobuf:"varint,16,opt,name=unique_items,json=uniqueItems,proto3" json:"unique_items,omitempty"`
	MinItems    uint64   `protobuf:"varint,17,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	MaxItems    uint64   `protobuf:"varint,18,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
	HasMaxItems bool     `protobuf:"varint,19,opt,name=has_max_items,json=hasMaxItems,proto3" json:"has_max_items,omitempty"` // TODO: additionalItems :: bool | SID
	// type: object
	Properties              map[string]uint32                 `protobuf:"bytes,20,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Required                []string                          `protobuf:"bytes,21,rep,name=required,proto3" json:"required,omitempty"`
	MinProperties           uint64                            `protobuf:"varint,22,opt,name=min_properties,json=minProperties,proto3" json:"min_properties,omitempty"`
	MaxProperties           uint64                            `protobuf:"varint,23,opt,name=max_properties,json=maxProperties,proto3" json:"max_properties,omitempty"`
	HasMaxProperties        bool                              `protobuf:"varint,24,opt,name=has_max_properties,json=hasMaxProperties,proto3" json:"has_max_properties,omitempty"`
	AdditionalProperties    *Schema_JSON_AdditionalProperties `protobuf:"bytes,25,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
	HasAdditionalProperties bool                              `protobuf:"varint,26,opt,name=has_additional_properties,json=hasAdditionalProperties,proto3" json:"has_additional_properties,omitempty"` // TODO: patternProperties :: SID
	AllOf                   []uint32                          `protobuf:"varint,27,rep,packed,name=all_of,json=allOf,proto3" json:"all_of,omitempty"`
	AnyOf                   []uint32                          `protobuf:"varint,28,rep,packed,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	OneOf                   []uint32                          `protobuf:"varint,29,rep,packed,name=one_of,json=oneOf,proto3" json:"one_of,omitempty"`
	Not                     uint32                            `protobuf:"varint,30,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *Schema_JSON) Reset() {
	*x = Schema_JSON{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_JSON) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_JSON) ProtoMessage() {}

func (x *Schema_JSON) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_JSON.ProtoReflect.Descriptor instead.
func (*Schema_JSON) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Schema_JSON) GetTypes() []Schema_JSON_Type {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Schema_JSON) GetEnum() []*structpb.Value {
	if x != nil {
		return x.Enum
	}
	return nil
}

func (x *Schema_JSON) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Schema_JSON) GetMinLength() uint64 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *Schema_JSON) GetMaxLength() uint64 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *Schema_JSON) GetHasMaxLength() bool {
	if x != nil {
		return x.HasMaxLength
	}
	return false
}

func (x *Schema_JSON) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Schema_JSON) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *Schema_JSON) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

func (x *Schema_JSON) GetHasMinimum() bool {
	if x != nil {
		return x.HasMinimum
	}
	return false
}

func (x *Schema_JSON) GetHasMaximum() bool {
	if x != nil {
		return x.HasMaximum
	}
	return false
}

func (x *Schema_JSON) GetTranslatedMultipleOf() float64 {
	if x != nil {
		return x.TranslatedMultipleOf
	}
	return 0
}

func (x *Schema_JSON) GetExclusiveMinimum() bool {
	if x != nil {
		return x.ExclusiveMinimum
	}
	return false
}

func (x *Schema_JSON) GetExclusiveMaximum() bool {
	if x != nil {
		return x.ExclusiveMaximum
	}
	return false
}

func (x *Schema_JSON) GetItems() []uint32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Schema_JSON) GetUniqueItems() bool {
	if x != nil {
		return x.UniqueItems
	}
	return false
}

func (x *Schema_JSON) GetMinItems() uint64 {
	if x != nil {
		return x.MinItems
	}
	return 0
}

func (x *Schema_JSON) GetMaxItems() uint64 {
	if x != nil {
		return x.MaxItems
	}
	return 0
}

func (x *Schema_JSON) GetHasMaxItems() bool {
	if x != nil {
		return x.HasMaxItems
	}
	return false
}

func (x *Schema_JSON) GetProperties() map[string]uint32 {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Schema_JSON) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

func (x *Schema_JSON) GetMinProperties() uint64 {
	if x != nil {
		return x.MinProperties
	}
	return 0
}

func (x *Schema_JSON) GetMaxProperties() uint64 {
	if x != nil {
		return x.MaxProperties
	}
	return 0
}

func (x *Schema_JSON) GetHasMaxProperties() bool {
	if x != nil {
		return x.HasMaxProperties
	}
	return false
}

func (x *Schema_JSON) GetAdditionalProperties() *Schema_JSON_AdditionalProperties {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Schema_JSON) GetHasAdditionalProperties() bool {
	if x != nil {
		return x.HasAdditionalProperties
	}
	return false
}

func (x *Schema_JSON) GetAllOf() []uint32 {
	if x != nil {
		return x.AllOf
	}
	return nil
}

func (x *Schema_JSON) GetAnyOf() []uint32 {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *Schema_JSON) GetOneOf() []uint32 {
	if x != nil {
		return x.OneOf
	}
	return nil
}

func (x *Schema_JSON) GetNot() uint32 {
	if x != nil {
		return x.Not
	}
	return 0
}

type Schema_JSON_AdditionalProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AddProps:
	//	*Schema_JSON_AdditionalProperties_AlwaysSucceed
	//	*Schema_JSON_AdditionalProperties_SID
	AddProps isSchema_JSON_AdditionalProperties_AddProps `protobuf_oneof:"add_props"`
}

func (x *Schema_JSON_AdditionalProperties) Reset() {
	*x = Schema_JSON_AdditionalProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fuzzymonkey_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_JSON_AdditionalProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_JSON_AdditionalProperties) ProtoMessage() {}

func (x *Schema_JSON_AdditionalProperties) ProtoReflect() protoreflect.Message {
	mi := &file_fuzzymonkey_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_JSON_AdditionalProperties.ProtoReflect.Descriptor instead.
func (*Schema_JSON_AdditionalProperties) Descriptor() ([]byte, []int) {
	return file_fuzzymonkey_proto_rawDescGZIP(), []int{12, 0, 1}
}

func (m *Schema_JSON_AdditionalProperties) GetAddProps() isSchema_JSON_AdditionalProperties_AddProps {
	if m != nil {
		return m.AddProps
	}
	return nil
}

func (x *Schema_JSON_AdditionalProperties) GetAlwaysSucceed() bool {
	if x, ok := x.GetAddProps().(*Schema_JSON_AdditionalProperties_AlwaysSucceed); ok {
		return x.AlwaysSucceed
	}
	return false
}

func (x *Schema_JSON_AdditionalProperties) GetSID() uint32 {
	if x, ok := x.GetAddProps().(*Schema_JSON_AdditionalProperties_SID); ok {
		return x.SID
	}
	return 0
}

type isSchema_JSON_AdditionalProperties_AddProps interface {
	isSchema_JSON_AdditionalProperties_AddProps()
}

type Schema_JSON_AdditionalProperties_AlwaysSucceed struct {
	AlwaysSucceed bool `protobuf:"varint,1,opt,name=always_succeed,json=alwaysSucceed,proto3,oneof"` // TODO: simplify: true is equivalent to {}, false is equivalent to {"not": {}}
}

type Schema_JSON_AdditionalProperties_SID struct {
	SID uint32 `protobuf:"varint,2,opt,name=SID,proto3,oneof"`
}

func (*Schema_JSON_AdditionalProperties_AlwaysSucceed) isSchema_JSON_AdditionalProperties_AddProps() {
}

func (*Schema_JSON_AdditionalProperties_SID) isSchema_JSON_AdditionalProperties_AddProps() {}

var File_fuzzymonkey_proto protoreflect.FileDescriptor

var file_fuzzymonkey_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x6d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x66, 0x6d, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x15, 0x0a, 0x03, 0x43, 0x6c, 0x74, 0x12, 0x22, 0x0a,
	0x04, 0x66, 0x75, 0x7a, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6d,
	0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x7a,
	0x7a, 0x12, 0x3e, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6d, 0x2e, 0x43,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x42, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6d,
	0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x77, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x12, 0x4b, 0x0a, 0x13,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6d, 0x2e, 0x43,
	0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xae, 0x08, 0x0a, 0x04, 0x46, 0x75,
	0x7a, 0x7a, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x04, 0x45, 0x49, 0x44,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74,
	0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x2e, 0x45, 0x49, 0x44, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x45, 0x49, 0x44, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6d, 0x2e, 0x43,
	0x6c, 0x74, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x61, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x52, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x55, 0x55,
	0x49, 0x44, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x1a, 0xc0, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x1a, 0x43, 0x0a, 0x05, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x1a, 0xeb, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x33,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e,
	0x46, 0x75, 0x7a, 0x7a, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x50, 0x49, 0x76, 0x33, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x33, 0x1a, 0x86, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x50, 0x49, 0x76, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x49, 0x52, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x1a, 0x44, 0x0a, 0x09, 0x45, 0x49, 0x44, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x6d, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x61, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb4, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66,
	0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x4e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10,
	0x03, 0x1a, 0xf1, 0x02, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x77, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x1a, 0x92, 0x02, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61, 0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xb0, 0x01, 0x0a, 0x0b, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x39, 0x0a, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0xc6, 0x03, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x2e, 0x43,
	0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x61, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x1a, 0xde, 0x02,
	0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x61, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xf5, 0x01, 0x0a,
	0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x66, 0x6d, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x44, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x4e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x80,
	0x03, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c,
	0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x4e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0x48, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x22, 0x39, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x02, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc5, 0x0d, 0x0a, 0x03, 0x53, 0x72, 0x76,
	0x12, 0x42, 0x0a, 0x10, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6d, 0x2e,
	0x53, 0x72, 0x76, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0f, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x66, 0x75, 0x7a, 0x7a, 0x5f, 0x72, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x72, 0x76, 0x2e,
	0x46, 0x75, 0x7a, 0x7a, 0x52, 0x65, 0x70, 0x48, 0x00, 0x52, 0x07, 0x66, 0x75, 0x7a, 0x7a, 0x52,
	0x65, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x72, 0x76, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x72, 0x76, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a,
	0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x72, 0x76, 0x2e, 0x46,
	0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x66, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xd9, 0x03,
	0x0a, 0x0f, 0x46, 0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x1a, 0xd9, 0x01, 0x0a, 0x07, 0x46, 0x75,
	0x7a, 0x7a, 0x52, 0x65, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x54, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19,
	0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x1a, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0xc9, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x28,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x66, 0x6d, 0x2e, 0x53, 0x72, 0x76, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xe5, 0x01, 0x0a, 0x05, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x2e, 0x53,
	0x72, 0x76, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x8d, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x07, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0xac, 0x03, 0x0a, 0x0d, 0x46,
	0x75, 0x7a, 0x7a, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x65, 0x65, 0x64, 0x55, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x73,
	0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x77, 0x61, 0x73, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x77,
	0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x77, 0x53, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x72, 0x76, 0x2e, 0x46, 0x75, 0x7a, 0x7a,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x9a, 0x01, 0x0a,
	0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6d, 0x2e, 0x43,
	0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x77, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d,
	0x2e, 0x43, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x61, 0x77, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x21, 0x0a, 0x07, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x06,
	0x53, 0x70, 0x65, 0x63, 0x49, 0x52, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x37, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x52, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x4a, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6d, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x29,
	0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66,
	0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x4c, 0x0a, 0x09, 0x4a, 0x73, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x2e, 0x52, 0x65, 0x66,
	0x4f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x4f, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x21, 0x0a, 0x03, 0x70, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x74, 0x72, 0x48, 0x00, 0x52, 0x03, 0x70, 0x74, 0x72, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x74, 0x72, 0x5f,
	0x6f, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x2f, 0x0a, 0x09, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x53, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x3e, 0x0a, 0x08, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x0c, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x2f, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x6d,
	0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x0d,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4a, 0x53, 0x4f,
	0x4e, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x2e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77,
	0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x09, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x53, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x6d, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x10, 0x05,
	0x22, 0x3d, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x70, 0x74, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x70, 0x70, 0x22,
	0xf5, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0xea, 0x0a, 0x0a, 0x04, 0x4a,
	0x53, 0x4f, 0x4e, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4a,
	0x53, 0x4f, 0x4e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6f,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4f, 0x66, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3f,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4a,
	0x53, 0x4f, 0x4e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x14, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x6c, 0x6c, 0x4f, 0x66, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x6e,
	0x65, 0x4f, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6e, 0x6f, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0e,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x53, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x6f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x61,
	0x6e, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x08, 0x32, 0x2b, 0x0a, 0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x79,
	0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x02, 0x44, 0x6f, 0x12, 0x07, 0x2e, 0x66,
	0x6d, 0x2e, 0x43, 0x6c, 0x74, 0x1a, 0x07, 0x2e, 0x66, 0x6d, 0x2e, 0x53, 0x72, 0x76, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x4d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x43, 0x6f,
	0x2f, 0x6d, 0x6f, 0x6e, 0x6b, 0x65, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x66, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fuzzymonkey_proto_rawDescOnce sync.Once
	file_fuzzymonkey_proto_rawDescData = file_fuzzymonkey_proto_rawDesc
)

func file_fuzzymonkey_proto_rawDescGZIP() []byte {
	file_fuzzymonkey_proto_rawDescOnce.Do(func() {
		file_fuzzymonkey_proto_rawDescData = protoimpl.X.CompressGZIP(file_fuzzymonkey_proto_rawDescData)
	})
	return file_fuzzymonkey_proto_rawDescData
}

var file_fuzzymonkey_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_fuzzymonkey_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_fuzzymonkey_proto_goTypes = []interface{}{
	(Clt_ResetProgress_Status)(0),     // 0: fm.Clt.ResetProgress.Status
	(Clt_CallVerifProgress_Status)(0), // 1: fm.Clt.CallVerifProgress.Status
	(Clt_CallVerifProgress_Origin)(0), // 2: fm.Clt.CallVerifProgress.Origin
	(EndpointJSON_Method)(0),          // 3: fm.EndpointJSON.Method
	(ParamJSON_Kind)(0),               // 4: fm.ParamJSON.Kind
	(Schema_JSON_Type)(0),             // 5: fm.Schema.JSON.Type
	(*Clt)(nil),                       // 6: fm.Clt
	(*Srv)(nil),                       // 7: fm.Srv
	(*Uint32S)(nil),                   // 8: fm.Uint32s
	(*HeaderPair)(nil),                // 9: fm.HeaderPair
	(*SpecIR)(nil),                    // 10: fm.SpecIR
	(*Schemas)(nil),                   // 11: fm.Schemas
	(*RefOrSchemaJSON)(nil),           // 12: fm.RefOrSchemaJSON
	(*SchemaPtr)(nil),                 // 13: fm.SchemaPtr
	(*Endpoint)(nil),                  // 14: fm.Endpoint
	(*EndpointJSON)(nil),              // 15: fm.EndpointJSON
	(*ParamJSON)(nil),                 // 16: fm.ParamJSON
	(*PathPartial)(nil),               // 17: fm.PathPartial
	(*Schema)(nil),                    // 18: fm.Schema
	(*Clt_Fuzz)(nil),                  // 19: fm.Clt.Fuzz
	(*Clt_ResetProgress)(nil),         // 20: fm.Clt.ResetProgress
	(*Clt_CallRequestRaw)(nil),        // 21: fm.Clt.CallRequestRaw
	(*Clt_CallResponseRaw)(nil),       // 22: fm.Clt.CallResponseRaw
	(*Clt_CallVerifProgress)(nil),     // 23: fm.Clt.CallVerifProgress
	(*Clt_Fuzz_Resetter)(nil),         // 24: fm.Clt.Fuzz.Resetter
	(*Clt_Fuzz_Model)(nil),            // 25: fm.Clt.Fuzz.Model
	nil,                               // 26: fm.Clt.Fuzz.EIDsEntry
	nil,                               // 27: fm.Clt.Fuzz.LabelsEntry
	nil,                               // 28: fm.Clt.Fuzz.EnvReadEntry
	nil,                               // 29: fm.Clt.Fuzz.FilesEntry
	(*Clt_Fuzz_Resetter_Shell)(nil),   // 30: fm.Clt.Fuzz.Resetter.Shell
	(*Clt_Fuzz_Model_OpenAPIv3)(nil),  // 31: fm.Clt.Fuzz.Model.OpenAPIv3
	(*Clt_CallRequestRaw_Input)(nil),  // 32: fm.Clt.CallRequestRaw.Input
	(*Clt_CallRequestRaw_Input_HttpRequest)(nil),    // 33: fm.Clt.CallRequestRaw.Input.HttpRequest
	(*Clt_CallResponseRaw_Output)(nil),              // 34: fm.Clt.CallResponseRaw.Output
	(*Clt_CallResponseRaw_Output_HttpResponse)(nil), // 35: fm.Clt.CallResponseRaw.Output.HttpResponse
	(*Srv_FuzzingProgress)(nil),                     // 36: fm.Srv.FuzzingProgress
	(*Srv_FuzzRep)(nil),                             // 37: fm.Srv.FuzzRep
	(*Srv_Call)(nil),                                // 38: fm.Srv.Call
	(*Srv_Reset)(nil),                               // 39: fm.Srv.Reset
	(*Srv_FuzzingResult)(nil),                       // 40: fm.Srv.FuzzingResult
	(*Srv_Call_Input)(nil),                          // 41: fm.Srv.Call.Input
	(*Srv_Call_Input_HttpRequest)(nil),              // 42: fm.Srv.Call.Input.HttpRequest
	(*Srv_FuzzingResult_CounterexampleItem)(nil),    // 43: fm.Srv.FuzzingResult.CounterexampleItem
	nil,                                      // 44: fm.SpecIR.EndpointsEntry
	nil,                                      // 45: fm.Schemas.JsonEntry
	nil,                                      // 46: fm.EndpointJSON.OutputsEntry
	(*Schema_JSON)(nil),                      // 47: fm.Schema.JSON
	nil,                                      // 48: fm.Schema.JSON.PropertiesEntry
	(*Schema_JSON_AdditionalProperties)(nil), // 49: fm.Schema.JSON.AdditionalProperties
	(*structpb.Value)(nil),                   // 50: google.protobuf.Value
}
var file_fuzzymonkey_proto_depIdxs = []int32{
	19, // 0: fm.Clt.fuzz:type_name -> fm.Clt.Fuzz
	20, // 1: fm.Clt.reset_progress:type_name -> fm.Clt.ResetProgress
	21, // 2: fm.Clt.call_request_raw:type_name -> fm.Clt.CallRequestRaw
	22, // 3: fm.Clt.call_response_raw:type_name -> fm.Clt.CallResponseRaw
	23, // 4: fm.Clt.call_verif_progress:type_name -> fm.Clt.CallVerifProgress
	36, // 5: fm.Srv.fuzzing_progress:type_name -> fm.Srv.FuzzingProgress
	37, // 6: fm.Srv.fuzz_rep:type_name -> fm.Srv.FuzzRep
	38, // 7: fm.Srv.call:type_name -> fm.Srv.Call
	39, // 8: fm.Srv.reset:type_name -> fm.Srv.Reset
	40, // 9: fm.Srv.fuzzing_result:type_name -> fm.Srv.FuzzingResult
	11, // 10: fm.SpecIR.schemas:type_name -> fm.Schemas
	44, // 11: fm.SpecIR.endpoints:type_name -> fm.SpecIR.EndpointsEntry
	45, // 12: fm.Schemas.json:type_name -> fm.Schemas.JsonEntry
	13, // 13: fm.RefOrSchemaJSON.ptr:type_name -> fm.SchemaPtr
	47, // 14: fm.RefOrSchemaJSON.schema:type_name -> fm.Schema.JSON
	15, // 15: fm.Endpoint.json:type_name -> fm.EndpointJSON
	3,  // 16: fm.EndpointJSON.method:type_name -> fm.EndpointJSON.Method
	17, // 17: fm.EndpointJSON.path_partials:type_name -> fm.PathPartial
	16, // 18: fm.EndpointJSON.inputs:type_name -> fm.ParamJSON
	46, // 19: fm.EndpointJSON.outputs:type_name -> fm.EndpointJSON.OutputsEntry
	4,  // 20: fm.ParamJSON.kind:type_name -> fm.ParamJSON.Kind
	24, // 21: fm.Clt.Fuzz.resetters:type_name -> fm.Clt.Fuzz.Resetter
	25, // 22: fm.Clt.Fuzz.models:type_name -> fm.Clt.Fuzz.Model
	26, // 23: fm.Clt.Fuzz.EIDs:type_name -> fm.Clt.Fuzz.EIDsEntry
	27, // 24: fm.Clt.Fuzz.labels:type_name -> fm.Clt.Fuzz.LabelsEntry
	28, // 25: fm.Clt.Fuzz.env_read:type_name -> fm.Clt.Fuzz.EnvReadEntry
	29, // 26: fm.Clt.Fuzz.files:type_name -> fm.Clt.Fuzz.FilesEntry
	0,  // 27: fm.Clt.ResetProgress.status:type_name -> fm.Clt.ResetProgress.Status
	32, // 28: fm.Clt.CallRequestRaw.input:type_name -> fm.Clt.CallRequestRaw.Input
	34, // 29: fm.Clt.CallResponseRaw.output:type_name -> fm.Clt.CallResponseRaw.Output
	1,  // 30: fm.Clt.CallVerifProgress.status:type_name -> fm.Clt.CallVerifProgress.Status
	2,  // 31: fm.Clt.CallVerifProgress.origin:type_name -> fm.Clt.CallVerifProgress.Origin
	30, // 32: fm.Clt.Fuzz.Resetter.shell:type_name -> fm.Clt.Fuzz.Resetter.Shell
	31, // 33: fm.Clt.Fuzz.Model.openapiv3:type_name -> fm.Clt.Fuzz.Model.OpenAPIv3
	8,  // 34: fm.Clt.Fuzz.EIDsEntry.value:type_name -> fm.Uint32s
	10, // 35: fm.Clt.Fuzz.Model.OpenAPIv3.spec:type_name -> fm.SpecIR
	33, // 36: fm.Clt.CallRequestRaw.Input.http_request:type_name -> fm.Clt.CallRequestRaw.Input.HttpRequest
	9,  // 37: fm.Clt.CallRequestRaw.Input.HttpRequest.headers:type_name -> fm.HeaderPair
	50, // 38: fm.Clt.CallRequestRaw.Input.HttpRequest.body_decoded:type_name -> google.protobuf.Value
	35, // 39: fm.Clt.CallResponseRaw.Output.http_response:type_name -> fm.Clt.CallResponseRaw.Output.HttpResponse
	9,  // 40: fm.Clt.CallResponseRaw.Output.HttpResponse.headers:type_name -> fm.HeaderPair
	50, // 41: fm.Clt.CallResponseRaw.Output.HttpResponse.body_decoded:type_name -> google.protobuf.Value
	41, // 42: fm.Srv.Call.input:type_name -> fm.Srv.Call.Input
	43, // 43: fm.Srv.FuzzingResult.counterexample:type_name -> fm.Srv.FuzzingResult.CounterexampleItem
	42, // 44: fm.Srv.Call.Input.http_request:type_name -> fm.Srv.Call.Input.HttpRequest
	9,  // 45: fm.Srv.Call.Input.HttpRequest.headers:type_name -> fm.HeaderPair
	50, // 46: fm.Srv.Call.Input.HttpRequest.body:type_name -> google.protobuf.Value
	32, // 47: fm.Srv.FuzzingResult.CounterexampleItem.call_request:type_name -> fm.Clt.CallRequestRaw.Input
	34, // 48: fm.Srv.FuzzingResult.CounterexampleItem.call_response:type_name -> fm.Clt.CallResponseRaw.Output
	14, // 49: fm.SpecIR.EndpointsEntry.value:type_name -> fm.Endpoint
	12, // 50: fm.Schemas.JsonEntry.value:type_name -> fm.RefOrSchemaJSON
	5,  // 51: fm.Schema.JSON.types:type_name -> fm.Schema.JSON.Type
	50, // 52: fm.Schema.JSON.enum:type_name -> google.protobuf.Value
	48, // 53: fm.Schema.JSON.properties:type_name -> fm.Schema.JSON.PropertiesEntry
	49, // 54: fm.Schema.JSON.additional_properties:type_name -> fm.Schema.JSON.AdditionalProperties
	6,  // 55: fm.FuzzyMonkey.Do:input_type -> fm.Clt
	7,  // 56: fm.FuzzyMonkey.Do:output_type -> fm.Srv
	56, // [56:57] is the sub-list for method output_type
	55, // [55:56] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_fuzzymonkey_proto_init() }
func file_fuzzymonkey_proto_init() {
	if File_fuzzymonkey_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fuzzymonkey_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32S); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecIR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schemas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefOrSchemaJSON); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaPtr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointJSON); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamJSON); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathPartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_Fuzz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_ResetProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_CallRequestRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_CallResponseRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_CallVerifProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_Fuzz_Resetter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_Fuzz_Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_Fuzz_Resetter_Shell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_Fuzz_Model_OpenAPIv3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_CallRequestRaw_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_CallRequestRaw_Input_HttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_CallResponseRaw_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clt_CallResponseRaw_Output_HttpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_FuzzingProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_FuzzRep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_Reset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_FuzzingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_Call_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_Call_Input_HttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv_FuzzingResult_CounterexampleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_JSON); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fuzzymonkey_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_JSON_AdditionalProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fuzzymonkey_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Clt_Fuzz_)(nil),
		(*Clt_ResetProgress_)(nil),
		(*Clt_CallRequestRaw_)(nil),
		(*Clt_CallResponseRaw_)(nil),
		(*Clt_CallVerifProgress_)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Srv_FuzzRep_)(nil),
		(*Srv_Call_)(nil),
		(*Srv_Reset_)(nil),
		(*Srv_FuzzingResult_)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RefOrSchemaJSON_Ptr)(nil),
		(*RefOrSchemaJSON_Schema)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Endpoint_Json)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*PathPartial_Part)(nil),
		(*PathPartial_Ptr)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Clt_Fuzz_Resetter_Shell_)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Clt_Fuzz_Model_Openapiv3)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Clt_CallRequestRaw_Input_HttpRequest_)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Clt_CallResponseRaw_Output_HttpResponse_)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*Srv_Call_Input_HttpRequest_)(nil),
	}
	file_fuzzymonkey_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*Schema_JSON_AdditionalProperties_AlwaysSucceed)(nil),
		(*Schema_JSON_AdditionalProperties_SID)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fuzzymonkey_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fuzzymonkey_proto_goTypes,
		DependencyIndexes: file_fuzzymonkey_proto_depIdxs,
		EnumInfos:         file_fuzzymonkey_proto_enumTypes,
		MessageInfos:      file_fuzzymonkey_proto_msgTypes,
	}.Build()
	File_fuzzymonkey_proto = out.File
	file_fuzzymonkey_proto_rawDesc = nil
	file_fuzzymonkey_proto_goTypes = nil
	file_fuzzymonkey_proto_depIdxs = nil
}
