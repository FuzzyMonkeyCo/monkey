syntax = "proto3";
package fm;

option go_package = "github.com/FuzzyMonkeyCo/monkey/pkg/internal/fm";

import "google/protobuf/struct.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// cf. https://github.com/gogo/protobuf/blob/master/extensions.md
option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.equal_all) = true;


service FuzzyMonkey {
  rpc Do(stream Clt) returns (stream Srv) {}
}

message Clt {
  message Fuzz {
    message Resetter {
      message Shell {
        string start = 1;
        string rst = 2;
        string stop = 3;
      }
      oneof resetter {
        Shell shell = 1;
      }
    }
    Resetter resetter = 1;
    message Model {
      message OpenAPIv3 {
        // File path within current directory pointing to a YAML/JSON spec
        string file = 1;
        // Host superseeds the spec's base URL
        string host = 2;
        // HeaderAuthorization is added as bearer token if non-empty
        string header_authorization = 3;
        // Spec is the spec pointed at by File
        SpecIR spec = 4;
      }
      oneof model {
        OpenAPIv3 openapiv3 = 1;
      }
    }
    Model model = 2;
    repeated string usage = 3;
    bytes seed = 4;
    uint32 ntensity = 5;
    repeated uint32 EIDs = 6;
    map<string, string> labels = 7;
    map<string, string> env_read = 8;
    repeated string UUIDs = 9;
    map<string, string> files = 10;
  }

  message ResetProgress {
    enum Status {
      NOOP = 0;
      started = 1;
      ended = 2;
      failed = 3;
    }
    Status status = 1;
    int64 elapsed_ns = 2;
    repeated string reason = 3;
  }

  message CallRequestRaw {
    message Input {
      message HttpRequest {
        string method = 1;
        string url = 2;
        message HeaderValues {
          repeated string values = 1;
        }
        map<string, HeaderValues> headers = 3;
        bytes body = 4;
        google.protobuf.Value body_decoded = 5;
      }
      oneof input {
        HttpRequest http_request = 1;
      }
    }
    Input input = 1;
    repeated string reason = 2;
  }

  message CallResponseRaw {
    message Output {
      message HttpResponse {
        string error = 1;
        uint32 status_code = 2;
        string reason = 3;
        message HeaderValues {
          repeated string values = 1;
        }
        map<string, HeaderValues> headers = 4;
        bytes body = 5;
        google.protobuf.Value body_decoded = 6;
        int64 elapsed_ns = 7;  // TODO: finer timings (name lookup, connection, ...)
                               // add http timings similar to
                               // https://developers.google.com/web/tools/chrome-devtools/network/reference#timing-explanation
      }
      oneof output {
        HttpResponse http_response = 1;
      }
    }
    Output output = 1;
    uint32 outputId = 2;
  }

  message CallVerifProgress {
    string name = 1;
    enum Status {
      NO_STATUS = 0;
      success = 1;
      skipped = 2;
      failure = 3;
      done = 4;
    }
    Status status = 2;
    enum Origin {
      NO_ORIGIN = 0;
      built_in = 1;
      after_response = 2;
    }
    Origin origin = 3;
    repeated string reason = 4;
    int64 elapsed_ns = 5;
    uint64 execution_steps = 6;
  }

  oneof msg {
    // Initiates testing
    Fuzz fuzz = 1;
    // SUT state resetting
    ResetProgress reset_progress = 2;
    // Actual call to SUT
    CallRequestRaw call_request_raw = 3;
    // SUT call response
    CallResponseRaw call_response_raw = 4;
    // SUT call verifications
    CallVerifProgress call_verif_progress = 5;
  }
}

message Srv {
  message FuzzingProgress {
    bool failure = 1;
    bool success = 2;
    bool last_call_success = 3;
    bool last_check_failure = 4;
    bool last_check_success = 5;
    uint32 total_tests_count = 6;
    uint32 total_calls_count = 7;
    uint32 total_checks_count = 8;
    uint32 test_calls_count = 9;
    uint32 call_checks_count = 10;
    uint32 call_checks_skipped = 11;
  }
  FuzzingProgress fuzzing_progress = 1; // Campaign progress

  message FuzzRep {
    uint32 max_tests_count = 1; // Maximum amount of tests that will be performed
    bytes seed = 2; // Seed in use for the campaign
    string token = 3;
    uint64 max_execution_steps_per_check = 4; // for Starlark SetMaxExecutionSteps
  }

  message Call {
    message Input {
      message HttpRequest {
        string method = 1;
        string url = 2;
        message HeaderValues {
          repeated string values = 1;
        }
        map<string, HeaderValues> headers = 3;
        google.protobuf.Value body = 4;
      }
      oneof input {
        HttpRequest http_request = 1;
      }
    }
    Input input = 1;
    uint32 EID = 2;
  }

  message Reset {}

  message FuzzingResult {
    bytes seed_used = 1; // Seed used on campaign
    bool was_shrinking = 2;
    bytes next_seed = 3; // Seed suggested for next run
    bool will_now_shrink = 4;
    bytes suggested_seed = 5;
    message CounterexampleItem {
      Clt.CallRequestRaw.Input call_request = 1;
      Clt.CallResponseRaw.Output call_response = 2;
    }
    repeated CounterexampleItem counterexample = 6;
  }

  oneof msg {
    // Response to initial message
    FuzzRep fuzz_rep = 2;
    // Try call to SUT
    Call call = 3;
    // Reset SUT state
    Reset reset = 4;
    // Result of testing campaign
    FuzzingResult fuzzing_result = 5;
  }
}

message SpecIR {
  Schemas schemas = 1;
  // All endpoints are here.
  // Start at 1 then increases monotonously. 0 (zero) is reserved for bug
  // finding.
  map<uint32, Endpoint> endpoints = 2;
}

message Schemas {
  // All schemas are here.
  // Start at 1. 0 (zero) is reserved for bug finding.
  map<uint32, RefOrSchemaJSON> json = 1;
}

message RefOrSchemaJSON {
  oneof ptr_or_schema {
    // Probably most often from a $ref
    // Only use SchemaPtr here. Everywhere else use SID.
    SchemaPtr ptr = 1;
    // Actual schema when not a $ref
    Schema.JSON schema = 2;
  }
}

message SchemaPtr {
  // Pointer to actual schema. i.e. key in Schemas message.
  uint32 SID = 1;
  // $ref if was ref'd, in canonical/absolute (#/...-like) format.
  string ref = 2;
}

message Endpoint {
  oneof endpoint {
    EndpointJSON json = 1;
  }
}

message EndpointJSON {
  enum Method {
    UNKNOWN = 0;
    GET = 1;
    HEAD = 2;
    POST = 3;
    PUT = 4;
    PATCH = 5;
    DELETE = 6;
    CONNECT = 7;
    OPTIONS = 8;
    TRACE = 9;
  }
  Method method = 1;
  repeated PathPartial path_partials = 2;
  repeated ParamJSON inputs = 3;
  // The uint32 key replaces an enum of 1XX,...,201,204,...,5XX,XXX.
  // The uint32 values are SID
  map<uint32, uint32> outputs = 4;
}

message ParamJSON {
  bool is_required = 1;
  uint32 SID = 2;
  // Note: bodies have an empty name
  string name = 3;

  enum Kind {
    UNKNOWN = 0;
    body = 1;
    path = 2;
    query = 3;
    header = 4;
    cookie = 5;
  }
  Kind kind = 4;

  // TODO: repeated Example examples
}

message PathPartial {
  oneof pp {
    string part = 1;
    string ptr = 2;
  }
}

message Schema {
  message JSON {

    enum Type {
      UNKNOWN = 0;
      any = 1;
      null = 2;
      boolean = 3;
      integer = 4;
      number = 5;
      array = 6;
      string = 7;
      object = 8;
    }
    repeated Type types = 1;

    repeated google.protobuf.Value enum = 2;

    // type: string
    enum Format {
      NONE = 0;
      date_time = 1;
      date = 2;
      // time = 3;
      email = 4;
      // idn-email = 5;
      hostname = 6;
      // idn_hostname = 7;
      ipv4 = 8;
      ipv6 = 9;
      uri = 10;
      uri_reference = 11;
      // iri = 12;
      // iri_reference = 13;
      // uri_template = 14;
      // json_pointer = 15;
      // relative_json_pointer = 16;
      regex = 17;
      int32 = 18;
      int64 = 19;
      float = 20;
      double = 21;
      byte = 22;
      binary = 23;
      password = 24;
    }
    Format format = 3;
    uint64 min_length = 4;
    uint64 max_length = 5;
    bool has_max_length = 6;
    string pattern = 7;

    // type: number | integer
    double minimum = 8;
    double maximum = 9;
    bool has_minimum = 10;
    bool has_maximum = 11;
    double translated_multiple_of = 12;  // default: 0.0, add +1.0 when reading
    bool exclusive_minimum = 13;
    bool exclusive_maximum = 14;

    // type: array
    repeated uint32 items = 15;
    bool unique_items = 16;
    uint64 min_items = 17;
    uint64 max_items = 18;
    bool has_max_items = 19;
    // TODO: additionalItems :: bool | SID

    // type: object
    map<string, uint32> properties = 20;
    repeated string required = 21;
    uint64 min_properties = 22;
    uint64 max_properties = 23;
    bool has_max_properties = 24;
    message AdditionalProperties {
      oneof add_props {
        bool always_succeed = 1; //TODO: simplify: true is equivalent to {}, false is equivalent to {"not": {}}
        uint32 SID = 2;
      }
    }
    AdditionalProperties additional_properties = 25;
    bool has_additional_properties = 26;
    // TODO: patternProperties :: SID

    repeated uint32 all_of = 27;
    repeated uint32 any_of = 28;
    repeated uint32 one_of = 29;

    uint32 not = 30;
  }
}
