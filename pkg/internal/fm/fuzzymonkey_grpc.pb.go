// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: fuzzymonkey.proto

package fm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FuzzyMonkey_Do_FullMethodName = "/fm.FuzzyMonkey/Do"
)

// FuzzyMonkeyClient is the client API for FuzzyMonkey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuzzyMonkeyClient interface {
	Do(ctx context.Context, opts ...grpc.CallOption) (FuzzyMonkey_DoClient, error)
}

type fuzzyMonkeyClient struct {
	cc grpc.ClientConnInterface
}

func NewFuzzyMonkeyClient(cc grpc.ClientConnInterface) FuzzyMonkeyClient {
	return &fuzzyMonkeyClient{cc}
}

func (c *fuzzyMonkeyClient) Do(ctx context.Context, opts ...grpc.CallOption) (FuzzyMonkey_DoClient, error) {
	stream, err := c.cc.NewStream(ctx, &FuzzyMonkey_ServiceDesc.Streams[0], FuzzyMonkey_Do_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fuzzyMonkeyDoClient{stream}
	return x, nil
}

type FuzzyMonkey_DoClient interface {
	Send(*Clt) error
	Recv() (*Srv, error)
	grpc.ClientStream
}

type fuzzyMonkeyDoClient struct {
	grpc.ClientStream
}

func (x *fuzzyMonkeyDoClient) Send(m *Clt) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fuzzyMonkeyDoClient) Recv() (*Srv, error) {
	m := new(Srv)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FuzzyMonkeyServer is the server API for FuzzyMonkey service.
// All implementations must embed UnimplementedFuzzyMonkeyServer
// for forward compatibility
type FuzzyMonkeyServer interface {
	Do(FuzzyMonkey_DoServer) error
	mustEmbedUnimplementedFuzzyMonkeyServer()
}

// UnimplementedFuzzyMonkeyServer must be embedded to have forward compatible implementations.
type UnimplementedFuzzyMonkeyServer struct {
}

func (UnimplementedFuzzyMonkeyServer) Do(FuzzyMonkey_DoServer) error {
	return status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedFuzzyMonkeyServer) mustEmbedUnimplementedFuzzyMonkeyServer() {}

// UnsafeFuzzyMonkeyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuzzyMonkeyServer will
// result in compilation errors.
type UnsafeFuzzyMonkeyServer interface {
	mustEmbedUnimplementedFuzzyMonkeyServer()
}

func RegisterFuzzyMonkeyServer(s grpc.ServiceRegistrar, srv FuzzyMonkeyServer) {
	s.RegisterService(&FuzzyMonkey_ServiceDesc, srv)
}

func _FuzzyMonkey_Do_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FuzzyMonkeyServer).Do(&fuzzyMonkeyDoServer{stream})
}

type FuzzyMonkey_DoServer interface {
	Send(*Srv) error
	Recv() (*Clt, error)
	grpc.ServerStream
}

type fuzzyMonkeyDoServer struct {
	grpc.ServerStream
}

func (x *fuzzyMonkeyDoServer) Send(m *Srv) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fuzzyMonkeyDoServer) Recv() (*Clt, error) {
	m := new(Clt)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FuzzyMonkey_ServiceDesc is the grpc.ServiceDesc for FuzzyMonkey service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuzzyMonkey_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fm.FuzzyMonkey",
	HandlerType: (*FuzzyMonkeyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Do",
			Handler:       _FuzzyMonkey_Do_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fuzzymonkey.proto",
}
