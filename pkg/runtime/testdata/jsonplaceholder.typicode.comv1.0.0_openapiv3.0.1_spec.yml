openapi: 3.0.1
info:
  title: JSON Placeholder
  description: Fake Online REST API for Testing and Prototyping
  version: 1.0.0
servers:
- url: https://jsonplaceholder.typicode.com/
tags:
- name: posts
- name: comments
- name: albums
- name: photos
- name: users
paths:
  /posts:
    get:
      tags: [posts]
      summary: Get all available posts
      operationId: getPosts
      parameters:
      - name: id
        in: query
        description: Filter by post ID
        schema: {$ref: '#/components/schemas/PostId'}
      - name: userId
        in: query
        description: Filter by user ID
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Posts'}
  /posts/{id}:
    get:
      tags: [posts]
      summary: Get specific post
      parameters:
      - name: id
        in: path
        description: The ID of the post to retrieve
        required: true
        schema: {$ref: '#/components/schemas/PostId'}
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /posts/{id}/comments:
    get:
      tags: [posts]
      summary: Get comments for a specific post
      parameters:
      - name: id
        in: path
        description: post id
        required: true
        schema: {$ref: '#/components/schemas/PostId'}
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Comments'}
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /comments:
    get:
      tags: [comments]
      summary: Get all available comments
      operationId: getComments
      parameters:
      - name: id
        in: query
        description: Filter by comment ID
        schema: {$ref: '#/components/schemas/CommentId'}
      - name: postId
        in: query
        description: Filter by post ID
        schema: {$ref: '#/components/schemas/PostId'}
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema: {$ref: '#/components/schemas/Comments'}
  /comments/{id}:
    get:
      tags: [comments]
      summary: Get specific comment
      operationId: getComment
      parameters:
      - name: id
        in: path
        description: The ID of the comment to retrieve
        required: true
        schema: {$ref: '#/components/schemas/CommentId'}
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /albums:
    get:
      tags: [albums]
      summary: Get all available albums
      operationId: getAlbums
      parameters:
      - name: id
        in: query
        description: Filter by album ID
        schema:
          type: integer
      - name: userId
        in: query
        description: Filter by user ID
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
  /albums/{id}:
    get:
      tags: [albums]
      summary: Get specific album
      parameters:
      - name: id
        in: path
        description: The ID of the album to retrieve
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /albums/{id}/photos:
    get:
      tags: [albums]
      summary: Get photos for a specific album
      parameters:
      - name: id
        in: path
        description: album id
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /photos:
    get:
      tags: [photos]
      summary: Get all available photos
      operationId: getPhotos
      parameters:
      - name: id
        in: query
        description: Filter by photo ID
        schema:
          type: integer
      - name: albumId
        in: query
        description: Filter by album ID
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
  /photos/{id}:
    get:
      tags: [photos]
      summary: Get specific photo
      operationId: getPhoto
      parameters:
      - name: id
        in: path
        description: The ID of the photo to retrieve
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /users:
    get:
      tags: [users]
      summary: Get all available users
      operationId: getUsers
      parameters:
      - name: id
        in: query
        description: Filter by user ID
        schema:
          type: integer
      - name: email
        in: query
        description: Filter by user email address
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      tags: [users]
      summary: Get specific user
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: The ID of the user to retrieve
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

components:
  schemas:
    CommentId:
      type: integer
      format: int64
    Comments:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Comment:
      type: object
      properties:
        id: {$ref: '#/components/schemas/CommentId'}
        postId:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
          # format: email
        body:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        username:
          type: string
        email:
          type: string
          # format: email
        phone:
          type: string
        website:
          type: string
        company:
          type: object
          properties:
            bs:
              type: string
            catchPhrase:
              type: string
            name:
              type: string
        address:
          type: object
          properties:
            zipcode:
              type: string
            geo:
              type: object
              properties:
                lng:
                  type: string
                lat:
                  type: string
            suite:
              type: string
            city:
              type: string
            street:
              type: string

    PostId:
      type: integer
      format: int64
    Posts:
      type: array
      items:
        $ref: '#/components/schemas/Post'
    Post:
      type: object
      properties:
        id: {$ref: '#/components/schemas/PostId'}
        userId:
          type: integer
          format: int64
        title:
          type: string
        body:
          type: string

    Album:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        title:
          type: string
    Photo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        albumId:
          type: integer
          format: int64
        title:
          type: string
        url:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
    NotFoundError:
      type: object
